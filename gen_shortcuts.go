package dada

// This file is generated by gen_shortcuts.py
// Please don't modified this file by hands
// Instead, you should modify gen_shortcuts.py and run it


func (c *Ctx) HTML(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("html", attr, fn)
}

func (c *Ctx) HEAD(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("head", attr, fn)
}

func (c *Ctx) TITLE(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("title", attr, fn)
}

func (c *Ctx) META(args ...interface{}) {
    var attr Attr
    if len(args) > 0 {
        attr = args[0].(Attr)
    }
    c.Element("meta", attr)
}

func (c *Ctx) LINK(args ...interface{}) {
    var attr Attr
    if len(args) > 0 {
        attr = args[0].(Attr)
    }
    c.Element("link", attr)
}

func (c *Ctx) SCRIPT(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("script", attr, fn)
}

func (c *Ctx) STYLE(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("style", attr, fn)
}

func (c *Ctx) BODY(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("body", attr, fn)
}

func (c *Ctx) P(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("p", attr, fn)
}

func (c *Ctx) A(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("a", attr, fn)
}

func (c *Ctx) IMG(args ...interface{}) {
    var attr Attr
    if len(args) > 0 {
        attr = args[0].(Attr)
    }
    c.Element("img", attr)
}

func (c *Ctx) PRE(args ...interface{}) {
    var attr Attr
    if len(args) > 0 {
        attr = args[0].(Attr)
    }
    c.Element("pre", attr)
}

func (c *Ctx) CANVAS(args ...interface{}) {
    var attr Attr
    if len(args) > 0 {
        attr = args[0].(Attr)
    }
    c.Element("canvas", attr)
}

func (c *Ctx) DIV(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("div", attr, fn)
}

func (c *Ctx) SPAN(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("span", attr, fn)
}

func (c *Ctx) HEADER(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("header", attr, fn)
}

func (c *Ctx) FOOTER(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("footer", attr, fn)
}

func (c *Ctx) HL(args ...interface{}) {
    var attr Attr
    if len(args) > 0 {
        attr = args[0].(Attr)
    }
    c.Element("hl", attr)
}

func (c *Ctx) H1(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("h1", attr, fn)
}

func (c *Ctx) H2(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("h2", attr, fn)
}

func (c *Ctx) H3(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("h3", attr, fn)
}

func (c *Ctx) H4(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("h4", attr, fn)
}

func (c *Ctx) H5(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("h5", attr, fn)
}

func (c *Ctx) H6(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("h6", attr, fn)
}

func (c *Ctx) UL(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("ul", attr, fn)
}

func (c *Ctx) LI(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("li", attr, fn)
}

func (c *Ctx) OL(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("ol", attr, fn)
}

func (c *Ctx) TABLE(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("table", attr, fn)
}

func (c *Ctx) THEAD(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("thead", attr, fn)
}

func (c *Ctx) TBODY(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("tbody", attr, fn)
}

func (c *Ctx) TFOOT(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("tfoot", attr, fn)
}

func (c *Ctx) TR(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("tr", attr, fn)
}

func (c *Ctx) TD(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("td", attr, fn)
}

func (c *Ctx) TH(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("th", attr, fn)
}

func (c *Ctx) FORM(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("form", attr, fn)
}

func (c *Ctx) INPUT(args ...interface{}) {
    var attr Attr
    if len(args) > 0 {
        attr = args[0].(Attr)
    }
    c.Element("input", attr)
}

func (c *Ctx) SELECT(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("select", attr, fn)
}

func (c *Ctx) OPTION(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("option", attr, fn)
}

func (c *Ctx) TEXTAREA(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("textarea", attr, fn)
}

func (c *Ctx) LABEL(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("label", attr, fn)
}

func (c *Ctx) FIELDSET(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("fieldset", attr, fn)
}

func (c *Ctx) LEGEND(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("legend", attr, fn)
}

func (c *Ctx) BUTTON(args ...interface{}) {
    attr, fn := c.getArgs(args)
    c.Container("button", attr, fn)
}
