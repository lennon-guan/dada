#!-*- coding: utf-8 -*-

from __future__ import print_function
import sys

tag_list = [
    # name      is-container
    ('Html',        True),
    # header elements
    ('Head',        True),
    ('Title',       True),
    ('Meta',        False),
    ('Link',        False),
    ('Script',      True),
    ('Style',       True),
    # general elements in body
    ('Body',        True),
    ('P',           True),
    ('A',           True),
    ('Img',         False),
    ('Pre',         False),
    ('Canvas',      False),
    ('Div',         True),
    ('Span',        True),
    ('Header',      True),
    ('Footer',      True),
    ('Hl',          False),
    ('H1',          True),
    ('H2',          True),
    ('H3',          True),
    ('H4',          True),
    ('H5',          True),
    ('H6',          True),
    # list
    ('Ul',          True),
    ('Li',          True),
    ('Ol',          True),
    # table
    ('Table',       True),
    ('Thead',       True),
    ('Tbody',       True),
    ('Tfoot',       True),
    ('Tr',          True),
    ('Td',          True),
    ('Th',          True),
    # form elements
    ('Form',        True),
    ('Input',       False),
    ('Select',      True),
    ('Option',      True),
    ('Textarea',    True),
    ('Label',       True),
    ('Fieldset',    True),
    ('Legend',      True),
]

def element(name, file):
    print('''
func (c *Ctx) {0}(args ...interface{{}}) {{
    var attr Attr
    if len(args) > 0 {{
        attr = args[0].(Attr)
    }}
    c.Element("{1}", attr)
}}'''.format(name.upper(), name.lower()), file=file)

def container(name, file):
    print('''
func (c *Ctx) {0}(args ...interface{{}}) {{
    attr, fn := c.getArgs(args)
    c.Container("{1}", attr, fn)
}}'''.format(name.upper(), name.lower()), file=file)

outf = sys.stdout

print('package dada', file=outf)
print('', file=outf)
print('''\
// This file is generated by gen_shortcuts.py
// Please don't modified this file by hands
// Instead, you should modify gen_shortcuts.py and run it
''', file=outf)

for name, is_container in tag_list:
    if is_container:
        container(name, outf)
    else:
        element(name, outf)
